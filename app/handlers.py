import uuid
import logging
import requests
from pymongo import MongoClient
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage, ButtonsTemplate, TemplateSendMessage, PostbackAction
)
from config import Config
from db import requests_collection  # ‚úÖ ‡πÉ‡∏ä‡πâ connection pool

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)  # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® logger ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

# ‡πÄ‡∏Å‡πá‡∏ö state ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
user_session = {}

def reset_state(user_id):
    """ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà """
    user_session[user_id] = {
        "state": "choosing_action",
        "amount": None,
        "reason": None,
        "license_plate": None,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        "location": None,
        "request_id": None
    }

def generate_request_id():
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Unique """
    return str(uuid.uuid4())[:8]  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á UUID

def handle_user_request(event, line_bot_api):
    """ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÄ‡∏°‡∏ô‡∏π' """
    user_id = event.source.user_id

    if user_id not in user_session:
        reset_state(user_id)

    reply_message = TemplateSendMessage(
        alt_text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π",
        template=ButtonsTemplate(
            text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            actions=[
                PostbackAction(label="‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î", data=f"menu_withdraw_cash|{user_id}"),
                PostbackAction(label="‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î", data=f"deposit_cash|{user_id}")
                ]
        )
    )
    line_bot_api.reply_message(event.reply_token, reply_message)


def send_location_menu(user_id):
    """ ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô """
    return TemplateSendMessage(
        alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
        template=ButtonsTemplate(
            text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
            actions=[
                PostbackAction(label="‡∏Ñ‡∏•‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô", data=f"select_location|cold_storage|{user_id}"),
                PostbackAction(label="‡πÇ‡∏ô‡∏ô‡∏¥‡πÇ‡∏Å‡∏∞", data=f"select_location|noniko|{user_id}")
            ]
        )
    )

def send_reason_menu(user_id):
    """ ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô """
    return TemplateSendMessage(
        alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô",
        template=ButtonsTemplate(
            text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô",
            actions=[
                PostbackAction(label="‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", data=f"select_reason|ice|{user_id}"),
                PostbackAction(label="‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô", data=f"select_reason|fuel|{user_id}"),
                PostbackAction(label="‡∏≠‡∏∑‡πà‡∏ô‡πÜ", data=f"select_reason|other|{user_id}")
            ]
        )
    )

def send_reason_deposit_menu(user_id):
    """ ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô """
    return TemplateSendMessage(
        alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô",
        template=ButtonsTemplate(
            text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô",
            actions=[
                PostbackAction(label="‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô", data=f"select_reason_deposit|change|{user_id}"),
                PostbackAction(label="‡∏ù‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢", data=f"select_reason_deposit|daily_sales|{user_id}"),
                PostbackAction(label="‡∏≠‡∏∑‡πà‡∏ô‡πÜ", data=f"select_reason_deposit|other_deposit|{user_id}")
            ]
        )
    )

def handle_postback(event, line_bot_api):
    """ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î """
    data = event.postback.data.split("|")
    action = data[0]
    user_id = data[-1]

    if user_id not in user_session:
        reset_state(user_id)

    reply_message = None

    if action == "menu_withdraw_cash":
        user_session[user_id]["state"] = "choosing_amount"
        reply_message = TemplateSendMessage(
            alt_text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å",
            template=ButtonsTemplate(
                text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å",
                actions=[
                    PostbackAction(label="40 ‡∏ö‡∏≤‡∏ó", data=f"select_amount|40|{user_id}"),
                    PostbackAction(label="80 ‡∏ö‡∏≤‡∏ó", data=f"select_amount|80|{user_id}"),
                    PostbackAction(label="100 ‡∏ö‡∏≤‡∏ó", data=f"select_amount|100|{user_id}"),
                    PostbackAction(label="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á", data=f"select_amount|custom|{user_id}")
                ]
            )
        )

    elif action == "deposit_cash":
        user_session[user_id]["state"] = "waiting_for_deposit_amount"
        reply_message = TextSendMessage(text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")

    elif action == "select_reason_deposit":
        reason = data[1]
        user_session[user_id]["reason"] = reason
        if reason == "other_deposit":
            user_session[user_id]["state"] = "waiting_for_location_deposit"
            reply_message = TextSendMessage(text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô")
        else:
            user_session[user_id]["state"] = "waiting_for_location_deposit"
            reply_message = send_location_menu(user_id)


    elif action == "select_amount":
        amount = data[1]
        if amount == "custom":
            user_session[user_id]["state"] = "waiting_for_amount"
            reply_message = TextSendMessage(text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
        else:
            if not amount.isdigit():
                reply_message = TextSendMessage(text="‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            else:
                user_session[user_id]["amount"] = amount
                user_session[user_id]["state"] = "choosing_reason"
                reply_message = send_reason_menu(user_id)

    elif action == "select_reason":
        reason = data[1]
        user_session[user_id]["reason"] = reason

        if reason == "fuel":
            user_session[user_id]["state"] = "waiting_for_license_plate"
            reply_message = TextSendMessage(text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ")
        elif reason == "other":
            user_session[user_id]["state"] = "waiting_for_other_reason"
            reply_message = TextSendMessage(text="üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô")
        else:
            user_session[user_id]["state"] = "waiting_for_location"
            reply_message = send_location_menu(user_id)

    elif action == "select_location":
        location = user_session[user_id]["location"] = data[1]
        amount = user_session[user_id]["amount"]
        reson = user_session[user_id]["reason"]
        state = user_session[user_id]["state"]
        logger.info(f"‚ùå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {state} ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
        if  state == "waiting_for_location_deposit" and location == "noniko":
            text = (
                f"‚úÖ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô\n"
                f"üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: {amount} ‡∏ö‡∏≤‡∏ó\n"
                f"üìå ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {reson}\n"
                f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô: {location}\n"
                f"üîÑ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"
            )
            api_url = "http://10.0.0.14:5050/api/deposit"
            payload = {
                "amount": int(amount),  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int
                "machine_id": "line_bot_audit_kf",
                "branch_id": "NONIKO"
            }
            headers = {
                "Content-Type": "application/json"
            }

            response = requests.post(api_url, json=payload, headers=headers, timeout=3600)
            reset_state(user_id)
            reply_message = TextSendMessage(text=text)
        elif state == "waiting_for_location": 
            send_summary(user_id, line_bot_api)
            return  # ‡πÑ‡∏°‡πà reset state ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô

    if reply_message:
        line_bot_api.reply_message(event.reply_token, reply_message)

def handle_text_input(event, line_bot_api):
    """ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå """
    user_id = event.source.user_id
    text = event.message.text.strip()
    reply_message = None

    if user_id not in user_session:
        reset_state(user_id)

    if text.lower() == "‡πÄ‡∏°‡∏ô‡∏π":
        reset_state(user_id)
        handle_user_request(event, line_bot_api)
        return
    elif text.lower() == "‡∏Ç‡∏≠‡πÑ‡∏≠‡∏î‡∏µ":
        reset_state(user_id)
        reply_message = TextSendMessage(text=f"‚ö†Ô∏è {user_id}")

    current_state = user_session[user_id]["state"]

    if current_state == "waiting_for_amount":
        if text.isdigit():
            user_session[user_id]["amount"] = text
            user_session[user_id]["state"] = "choosing_reason"
            reply_message = send_reason_menu(user_id)
        else:
            reply_message = TextSendMessage(text="‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

    elif current_state == "waiting_for_deposit_amount":
        if text.isdigit():
            user_session[user_id]["amount"] = text
            user_session[user_id]["state"] = "choosing_reason_deposit"
            reply_message = send_reason_deposit_menu(user_id)
        else:
            reply_message = TextSendMessage(text="‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

    elif current_state == "waiting_for_license_plate":
        if len(text.strip()) > 0:
            user_session[user_id]["license_plate"] = text
            user_session[user_id]["state"] = "waiting_for_location"
            reply_message = send_location_menu(user_id)
        else:
            reply_message = TextSendMessage(text="‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ")

    elif current_state == "waiting_for_other_reason":
        if len(text.strip()) > 0:
            user_session[user_id]["reason"] = text
            user_session[user_id]["state"] = "waiting_for_location"
            reply_message = send_location_menu(user_id)
        else:
            reply_message = TextSendMessage(text="‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    elif current_state == "waiting_for_location_deposit":
        if len(text.strip()) > 0:
            user_session[user_id]["reason"] = text
            user_session[user_id]["state"] = "waiting_for_location_deposit"
            reply_message = send_location_menu(user_id)
        else:
            reply_message = TextSendMessage(text="‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    if reply_message:
        line_bot_api.reply_message(event.reply_token, reply_message)

def send_summary(user_id, line_bot_api):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏Ç‡∏≠ """

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    amount = user_session[user_id].get("amount")
    reason = user_session[user_id].get("reason")
    location = user_session[user_id].get("location")
    license_plate = user_session[user_id].get("license_plate") if reason == "fuel" else None

    if not amount or not reason or not location or (reason == "fuel" and not license_plate):
        reset_state(user_id)
        line_bot_api.push_message(user_id, TextSendMessage(text="‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô"))
        return

    request_id = generate_request_id()
    user_session[user_id]["request_id"] = request_id

    location_text = "‡∏Ñ‡∏•‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô" if location == "cold_storage" else "‡πÇ‡∏ô‡∏ô‡∏¥‡πÇ‡∏Å‡∏∞"

    request_data = {
        "request_id": request_id,
        "user_id": user_id,
        "amount": amount,
        "reason": reason,
        "license_plate": license_plate,
        "location": location_text,
        "status": "pending"
    }
    requests_collection.insert_one(request_data)

    summary_text = (
        f"‚úÖ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥\n"
        f"üìå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠: {request_id}\n"
        f"üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: {amount} ‡∏ö‡∏≤‡∏ó\n"
        f"üìå ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {reason}\n"
        f"üöó ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: {license_plate if license_plate else '-'}\n"
        f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô: {location_text}\n"
        f"üîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"
    )
    reset_state(user_id)
    line_bot_api.push_message(user_id, TextSendMessage(text=summary_text))