import requests
import logging
import json
import requests
from flask import Blueprint, render_template, jsonify, redirect, url_for
from db import requests_collection, transactions_collection  # ‚úÖ Import transactions_collection
import datetime  # ‚úÖ Import datetime for current date

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)  # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® logger ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Blueprint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web UI ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
approved_requests_bp = Blueprint("approved_requests", __name__, template_folder="templates")

@approved_requests_bp.route("/money/approved-requests", methods=["GET"])
def get_approved_requests():
    """ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ """
    pending_requests = list(requests_collection.find({"status": "pending"}, {"_id": 0}))
    return render_template("approved_requests.html", requests=pending_requests)

@approved_requests_bp.route("/money/request-status", methods=["GET"])
def request_status():
    """ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß """
    approved_requests = list(requests_collection.find({"status": "approved"}, {"_id": 0}))
    rejected_requests = list(requests_collection.find({"status": "rejected"}, {"_id": 0}))

    return render_template(
        "request_status.html",
        approved_requests=approved_requests,
        rejected_requests=rejected_requests
    )


@approved_requests_bp.route("/money/approve/<request_id>", methods=["POST"])
def approve_request(request_id):
    """ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á API ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô """

    logger.info(f"üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠: {request_id}")

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    request_data = requests_collection.find_one({"request_id": request_id})

    if not request_data:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ {request_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return jsonify({"status": "error", "message": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ {request_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}), 404

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    amount = request_data.get("amount")
    location = request_data.get("location")
    reason = request_data.get("reason", "")  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠

    if not amount or not location:
        logger.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
        return jsonify({"status": "error", "message": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"}), 400

    # ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡πÇ‡∏ô‡∏ô‡∏¥‡πÇ‡∏Å‡∏∞"
    if location == "‡πÇ‡∏ô‡∏ô‡∏¥‡πÇ‡∏Å‡∏∞":
        api_url = "http://10.0.0.14:5050/api/withdraw"
        payload = {
            "amount": int(amount),  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int
            "machine_id": "line_bot_audit_kf",
            "branch_id": "NONIKO"
        }
        headers = {
            "Content-Type": "application/json"
        }

        logger.info(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á API ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {api_url} ‡∏î‡πâ‡∏ß‡∏¢ Payload: {payload}")

        try:
            response = requests.post(api_url, json=payload, headers=headers, timeout=3600)

            # ‚úÖ Log response status ‡πÅ‡∏•‡∏∞ body
            logger.info(f"üì§ API Response Status: {response.status_code}")
            logger.info(f"üì§ API Response Body: {response.text}")

            response.raise_for_status()  # ‡∏ñ‡πâ‡∏≤ HTTP Status ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 200 ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î Exception

            response_data = response.json()
            if response_data.get("transaction_status") != "success":
                logger.error(f"‚ùå API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response_data}")
                return jsonify({"status": "error", "message": f"API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response_data}"}), 500
            else:
                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "approved" ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                requests_collection.update_one({"request_id": request_id}, {"$set": {"status": "approved"}})
                
                # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô transactions collection
                current_date = datetime.datetime.now().strftime("%Y-%m-%d")  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
                transaction_data = {
                    "name": reason,
                    "amount": int(amount),
                    "receiptAttached": False,
                    "tags": [],
                    "type": "expense",
                    "selectedStorage": location,
                    "selectedDate": current_date
                }
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                transaction_result = transactions_collection.insert_one(transaction_data)
                logger.info(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ID: {transaction_result.inserted_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
                logger.info(f"‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠ {request_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return redirect("/money/approved-requests")

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå API Error: {str(e)}")
            return jsonify({"status": "error", "message": f"API Error: {str(e)}"}), 500
    elif location == "‡∏Ñ‡∏•‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô":
        api_url = "http://10.0.0.15:5050/api/withdraw"
        payload = {
            "amount": int(amount),  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int
            "machine_id": "line_bot_audit_kf",
            "branch_id": "Klanfrozen"
        }
        headers = {
            "Content-Type": "application/json"
        }

        logger.info(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á API ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {api_url} ‡∏î‡πâ‡∏ß‡∏¢ Payload: {payload}")

        try:
            response = requests.post(api_url, json=payload, headers=headers, timeout=3600)

            # ‚úÖ Log response status ‡πÅ‡∏•‡∏∞ body
            logger.info(f"üì§ API Response Status: {response.status_code}")
            logger.info(f"üì§ API Response Body: {response.text}")

            response.raise_for_status()  # ‡∏ñ‡πâ‡∏≤ HTTP Status ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 200 ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î Exception

            response_data = response.json()
            if response_data.get("transaction_status") != "success":
                logger.error(f"‚ùå API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response_data}")
                return jsonify({"status": "error", "message": f"API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response_data}"}), 500
            else:
                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "approved" ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                requests_collection.update_one({"request_id": request_id}, {"$set": {"status": "approved"}})
                
                # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô transactions collection
                current_date = datetime.datetime.now().strftime("%Y-%m-%d")  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
                transaction_data = {
                    "name": reason,
                    "amount": int(amount),
                    "receiptAttached": False,
                    "tags": [],
                    "type": "expense",
                    "selectedStorage": location,
                    "selectedDate": current_date
                }
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                transaction_result = transactions_collection.insert_one(transaction_data)
                logger.info(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ID: {transaction_result.inserted_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
                logger.info(f"‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠ {request_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return redirect("/money/approved-requests")

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå API Error: {str(e)}")
            return jsonify({"status": "error", "message": f"API Error: {str(e)}"}), 500

@approved_requests_bp.route("/money/reject/<request_id>", methods=["POST"])
def reject_request(request_id):
    """ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô MongoDB """
    requests_collection.update_one({"request_id": request_id}, {"$set": {"status": "rejected"}})
    return redirect("/money/approved-requests")